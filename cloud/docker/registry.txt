# https://github.com/docker/docker.github.io/blob/master/registry/deploying.md

# Run a local registry

sudo mkdir -p /data/docker_registry
sudo chown -R "$USER":docker /data/docker_registry

docker network create docker-registry-net

docker run -d \
  --restart=always \
  --name docker-registry \
  --net docker-registry-net \
  -p 5000:5000 \
  -v /data/docker_registry:/var/lib/registry \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \
  registry:2

docker run -d \
  --name docker-registry-ui \
  --net docker-registry-net \
  -p 8980:80 \
  -e REGISTRY_URL=http://docker-registry:5000 \
  joxit/docker-registry-ui:static

# on localhost
sudo vi /etc/docker/daemon.json
```
{
    "insecure-registries": ["<remote-host>:5000"]
}
```
sudo service docker restart

docker pull ubuntu:18.04

docker tag ubuntu:18.04 <host>:5000/my-ubuntu

docker push <host>:5000/my-ubuntu

docker image remove ubuntu:18.04

docker image remove <host>:5000/my-ubuntu

docker pull <host>:5000/my-ubuntu

docker container stop registry && docker container rm -v registry

# Run an externally-accessible registry
mkdir -p certs

cp domain.crt domain.key certs/

docker container stop registry

docker run -d \
  --restart=always \
  --name registry \
  -v `pwd`/certs:/certs \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -p 443:443 \
  registry:2

# Run the registry as a service
docker secret create domain.crt certs/domain.crt

docker secret create domain.key certs/domain.key

docker node update --label-add registry=true node1

docker service create \
  --name registry \
  --secret domain.crt \
  --secret domain.key \
  --constraint 'node.labels.registry==true' \
  --mount type=bind,src=/data/docker/registry,dst=/var/lib/registry \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/run/secrets/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/run/secrets/domain.key \
  --publish published=443,target=443 \
  --replicas 1 \
  registry:2

# Restricting access
mkdir auth

docker run \
  --entrypoint htpasswd \
  registry:2 -Bbn testuser testpassword > auth/htpasswd

docker container stop registry

docker run -d \
  -p 5000:5000 \
  --restart=always \
  --name registry \
  -v `pwd`/auth:/auth \
  -e "REGISTRY_AUTH=htpasswd" \
  -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
  -v `pwd`/certs:/certs \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  registry:2

docker login myregistrydomain.com:5000

# Deploy your registry using a Compose file
vi docker-compose.yml
```
registry:
  restart: always
  image: registry:2
  ports:
    - 5000:5000
  environment:
    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
    REGISTRY_HTTP_TLS_KEY: /certs/domain.key
    REGISTRY_AUTH: htpasswd
    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
  volumes:
    - /path/data:/var/lib/registry
    - /path/certs:/certs
    - /path/auth:/auth
```

docker-compose -f docker-compose.yml up -d

# Considerations for air-gapped registries
vi /etc/docker/daemon.json
```
{
  "allow-nondistributable-artifacts": ["myregistrydomain.com:5000"]
}
```

# https://github.com/docker/docker.github.io/blob/master/registry/recipes/nginx.md
# https://computingforgeeks.com/how-to-setup-docker-private-registry-on-ubuntu-18-04-letsencrypt-ssl/

